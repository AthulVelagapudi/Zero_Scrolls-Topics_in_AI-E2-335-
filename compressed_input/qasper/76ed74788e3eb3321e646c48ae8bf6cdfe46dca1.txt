<|begin_of_text|><|start_header_id|>system<|end_header_id|>

You are a helpful assistant. Always follow the task instruction carefully. The first paragraph before the first double line break contains the task instruction. Generate text as a natural continuation of the user message. Do not include any meta-commentary or explanations.<|eot_id|>
<|start_header_id|>user<|end_header_id|>

You are given a scientific article and a question. Answer the question as concisely as you can, using a single phrase or sentence if possible. If the question cannot be answered based on the information in the article, write "unanswerable". If the question is a yes/no question, answer "yes", "no", or "unanswerable".

Article:
Introduction  Modern Standard Arabic (MSA) and Classical Arabic (CA) have two types of vowels, namely long vowels, which are explicitly written, and short vowels, aka diacritics, which are typically omitted in writing but are reintroduced by readers to properly pronounce words.  Since diacritics disambiguate the sense of the words in context and their syntactic roles in sentences, automatic diacritic recovery is essential for applications such as text-to-speech and educational tools for language learners, who may not know how to properly verbalize words.Diacritics have two types, namely:  core-word (CW)  diacritics, which are internal to words and specify lexical selection; and  case-endings (CE), which appear on the last letter of word stems, typically specifying their syntactic role.For example, the word “ktb” (كتب>) can have multiple diacritized forms such as “katab” (كَتَب> – meaning “he wrote”) “kutub” (كُتُب> – “books”).  While “katab” can only assume one CE, namely “fatHa” (“a”), “kutub” can accept the CEs:  “damma” (“u”) (nominal – ex. subject), “a” (accusative – ex. object), “kasra” (“i”) (genitive – ex. PP predicate), or their nunations.  There are 14 diacritic combinations.When as they typically convey specific,:  fatHa “a” for accusative nouns, past verbs and subjunctive present verbs;  kasra “i” for genitive nouns;  damma “u” for nominative nouns and indicative present verbs;sukun “o” for jussive present verbs and imperative verbs.  FatHa, kasra and damma can be preceded by shadda “$\sim $” for gemination (consonant doubling) and/or converted to nunation forms following some grammar rules.  In addition, according to Arabic orthography and phonology, some words take a virtual (null) “#” marker when they end with certain characters (ex: long vowels).  This applies also to all non-Arabic words (ex: punctuation, digits, Latin words, etc.).Generally, function words, adverbs and foreign named entities (NEs) have set CEs (sukun, fatHa or virtual).  Similar to other Semitic languages, Arabic allows flexible Verb-Subject-Object as well as Verb-Object-Subject constructs BIBREF1.  Such flexibility creates inherent ambiguity, which is resolved by diacritics as in “r$>$Y Emr Ely”  (رأى عمر علي>Omar saw Ali/Ali saw Omar).  In the absence of diacritics it is not clear who saw whom.  Similarly, in the sub-sentence “kAn Alm&tmr AltAsE” (كان المؤتمر التاسع>), if the last word, is a predicate of the verb “kAn”, then the sentence would mean “this conference was the ninth” and would receive a fatHa (a) as a case ending.  Conversely, if it was an adjective to the “conference”, then the sentence would mean “the ninth conference was ...” and would receive a damma (u) as a case ending.Thus, a consideration of context is required for proper disambiguation.  Due to the inter-word dependence of CEs, they are typically harder to predict compared to core-word diacritics BIBREF2, BIBREF3, BIBREF4, BIBREF5, with CEER of state-of-the-art systems being in double digits compared to nearly 3% for word-cores.  Since recovering CEs is akin to shallow parsing BIBREF6 and requires morphological and syntactic processing, it is a difficult problem in Arabic NLP.  In this paper, we focus on recovering both CW diacritics and CEs.We employ two separate Deep Neural Network (DNN) architectures for recovering both kinds of diacritic types.  We use character-level and word-level bidirectional Long-Short Term Memory (biLSTM) based recurrent neural models for CW diacritic and CE recovery respectively.  We train models for both Modern Standard Arabic (MSA) and Classical Arabic (CA).  For CW diacritics, the model is informed using word segmentation information and a unigram language model.We also a un to perform post the.We achieve word rates for CW of. for M and CATheSA is the best results (the RDIritizer BIBREFThe CE is a of surface features.The proposed features would aid the biLSTM model in capturing syntactic dependencies indicated by Part-Of-Speech (POS) tags, gender and number features, morphological patterns, and affixes.  We show that our model achieves a case ending error rate (CEER) of 3.7% for MSA and 2.5% for CA.  For MSA, this CEER is more than 60% lower than other state-of-the-art systems such as Farasa and the RDI diacritizer, which are trained on the same dataset and achieve CEERs of 10.7% and 14.4% respectively.  The contributions of this paper are as follows:We employ a character-level RNN model that is informed using word morphological information and a word unigram language model to recover CW diacritics.  Our model beats the best state-of-the-art system by 6% for MSA.We introduce a new feature rich RNN-based CE recovery model that achieves errors rates that are 60% lower than the current state-of-the-art for MSA.  We explore the effect of different features, which may potentially be exploited for Arabic parsing.We show the effectiveness of our approach for both MSA and CA.  Background Automatic diacritics restoration has been investigated for many different language such as European languages (e.g. Romanian BIBREF8, BIBREF9, French BIBREF10, and Croatian BIBREF11), African languages (e.g. Yorba BIBREF12), Southeast Asian languages (e.g. Vietnamese BIBREF13), Semitic language (e.g. Arabic and Hebrew BIBREF14), and many others BIBREF15.For many languages, diacritic (or accent restoration) is limited to a handful of letters.  However, for Semitic languages, diacritic recovery extends to most letters.  Many general approaches have been explored for this problem including linguistically motivated rule-based approaches, machine learning approaches, such as Hidden Markov Models (HMM) BIBREF14 and Conditional Random Fields (CRF) BIBREF16, and lately deep learning approaches such as Arabic BIBREF17, BIBREF18, BIBREF19, Slovak BIBREF20, and Yorba BIBREF12.  Aside from rule-based approaches BIBREF21, different methods were used to recover diacritics in Arabic text.Using a hidden Markov model (HMM) BIBREF14, BIBREF22 with an input character sequence, the model attempts to find the best state sequence given previous observations.  BIBREF14 reported a 14% word error rate (WER) while BIBREF22 achieved a 4.1% diacritic error rate (DER) on the Quran (CA).  BIBREF23 combined both morphological, acoustic, and contextual features to build a diacritizer trained on FBIS and LDC CallHome ECA collections.  They reported a 9% (DER) without CE, and 28% DER with CE.BIBREF24 a of a finite trans.The cascade a word a char a morphological model.  The model achieved an accuracy of 7.33% WER without CE and and 23.61% WER with CE.  BIBREF25 employed a maximum entropy model for sequence classification.The system was trained on the LDC’s Arabic Treebank (ATB) and evaluated on a 600 articles from An-Nahar Newspaper (340K words) and achieved 5.5% DER and 18% WER on words without CE.  BIBREF26 used a hybrid approach that utilizes the output of Alkhalil morphological Analyzer BIBREF27 to generate all possible out of context diacritizations of a word.  Then, an HMM guesses the correct diacritized form.Similarly, Microsoft Arabic Toolkit Services (ATKS) diacritizer BIBREF28 uses a rule-based morphological analyzer that produces possible analyses and an HMM in conjunction with rules to guess the most likely analysis.  They report WER of 11.4% and 4.4% with and without CE.  MADAMIRA  BIBREF29 uses a combinations of morpho-syntactic features to rank a list of potential analyses provided by the Buckwalter Arabic Morphological Analyzer (BAMA) BIBREF30.An SVM trained on ATB selects the most probable analysis, including the diacritized form.  MADAMIRA achieves 19.0% and 6.7% WER with and without CE respectively BIBREF31.  Farasa BIBREF31 uses an HMM to guess CW diacritics and an SVM-rank based model trained on morphological and syntactic features to guess CEs.  Farasa achieves WER of 12.8% and 3.3% with and without CEs.More recent work employed different to the diization.  BIBREF a biMREF. They explored one three with 250 each, achieving% including on   used but lower results BIBREF7, BIBREF32.BIBREF33 comprehensive survey on Arabicrit.   by B34 that reported are often the different  They that a large unram LM for CWacritic is with the systems, which toram for post , two drawn, namely:restoring CEs is more challenging than CW diacritic restoration; and combining multiple features typically improves CE restoration.  In this paper, we expand upon the work in the literature by introducing feature-rich DNN models for restoring both CW and CE diacritics.  We compare our models to multiple systems on the same test set.We achieve results that reduce diritization than half the best SOTA.We further conduct an to the relative the different features  As for, is a with  ics, are a of 10000 roots of length 3, 4, or rarely 5.Arabic nouns and verbs are derived from roots by applying templates to the roots to generate stems.  Such templates may carry information that indicate morphological features of words such POS tag, gender, and number.  For example, given a 3-letter root with 3 consonants CCC, a valid template may be CwACC , where the infix “wA” (وا>) is inserted, this template typically indicates an Arabic broken, or irregular, plural template for a noun of template CACC or CACCp if masculine or feminine respectively.  Further, stems may accept prefixes and/or suffixes to form words.Prefixes include coordinating conjunctions, determiner, and prepositions, and suffixes include attached pronouns and gender and number markers.  Our Diacritizer :::  Training and Test CorporaFor M we the diritized corpus the RDI BIBREF7 the FarizerREF. contains 9 with approximately unique (excluding and punctuation marks).  The corpus covers multiple genres such as politics and sports and is a mix of MSA and CA.This corpus is considerably larger than the Arabic Treebank BIBREF35 and is more consistent in its diacritization.  For testing, we used the freely available WikiNews test set BIBREF31, which is composed of 70 MSA WikiNews articles (18,300 tokens) and evenly covers a variety of genres including politics, economics, health, science and technology, sports, arts and culture.  For CA, we obtained a large collection of fully diacritized classical texts (2.7M tokens) from a book publisher, and we held-out a small subset of 5,000 sentences (approximately 400k words) for testing.Then, we used the remaining sentences to train the CA models.  Our Diacritizer :::  Core Word Diacritization :::Features.  ic are typically from a roots by intocalled- (producing stems) and may accept a variety of prefixes and suffixes such as prepositions, determiners, and pronouns (producing words).  Word stems specify the lexical selection and are typically unaffected by the attached affixes.We used 4 feature types, namely:  CHAR: the characters.SEG: the position of the character in a word segment.  For example, given the word “wAlktAb” (والكتاب> and the book/writers), which is composed of 3 segments “w+Al+ktAb” (و+ال+كتاب>).  Letters were marked as “B” if they begin a segment, “M” if they are in the middle of a segment, “E” if they end a segment, and “S” if they are single letter segments.  So for “w+Al+ktAb”, the corresponding character positions are “S+BE+BMME”.We used Farasa to perform segmentation, which has a reported segmentation accuracy of 99% on the WikiNews dataset BIBREF36.  PRIOR: diacritics seen in the training set per segment.  Since we used a character level model, this feature informed the model with word level information. the�kt� (�>) was have tworit the,kita��> –kut$\sim $ّ –).The first word)��  Thus a vector representing is to assume the eight primitiveac (,,,, and $ in the letter be the vector01  If word segment was observed for letters to111.This feature borrows information from HMM models, which have been fairly successful in diacritizing word cores.  CASE: whether the letter expects a core word diacritic or a case ending.  Case endings are placed on only one letter in a word, which may or may not be the last letter in the word.This is a binary feature.  Our Diacritizer :::  Core Word Diacritization :::DNN. , a biM BIBREF is model automatically the of and capture.  A number of studies have explored various biLSTM architectures BIBREF17, BIBREF7, BIBREF32 including stacked biLSTMs confirming their effectiveness.As shown in Figure FIGREF14, we employed a character-based biLSTM model with associated features for each character.  Every input character had an associated list of $m$ features, and we trained randomly initialized embeddings of size 50 for each feature.  Then, we concatenated the feature embeddings vectors creating an $m\times 50$ vector for each character, which was fed into the biLSTM layer of length 100.  The output of the biLSTM layer was fed directly into a dense layer of size 100.We used early stopping,, of, and an Adamax optimizer.  The input was the character sequence in a sentence with words being separated by word boundary markers (WB), and we set the maximum sentence length to 1,250 characters.  Our Diacritizer :::Case Ending Diacritization :::  Features.  Table TABREF17 lists the features that we used for CE recovery.We used Farasa to perform segmentation and POS tagging and to determine stem-templates BIBREF31.  Farasa has a reported POS accuracy of 96% on the WikiNews dataset BIBREF31.  Though the Farasa diacritizer utilizes a combination of some the features presented herein, namely segmentation, POS tagging, and stem templates, Farasa's SVM-ranking approach requires explicit specification of feature combinations (ex. $Prob(CE\Vert current\_word, prev\_word, prev\_CE)$).  Manual exploration of the feature space is undesirable, and ideally we would want our learning algorithm to do so automatically.The flexibility of the DNN model allowed us to include many more surface level features such as affixes, leading and trailing characters in words and stems, and the presence of words in large gazetteers of named entities.  As we show later, these additional features significantly lowered CEER.  Our Diacritizer :::Case Ending Diacritization :::  DNN  ModelFigure  FIGREF19 shows the architecture of our DNN algorithm.  Every input word had an associated list of $n$ features, and we trained randomly initialized embeddings of size 100 for each feature.  Then, we concatenated the feature embeddings vectors creating an $n\times 100$ vector for each word.We fed these vectors into a biLSTM layer of 100 dimensions after applying a dropout of 75%, where dropout behaves like a regularlizer to avoid overfitting BIBREF40.  We conducted side experiments with lower dropout rates, but the higher dropout rate worked best.  The output of the biLSTM layer was fed into a 100 dimensional dense layer with 15% dropout and softmax activation.  We conducted side experiments where we added additional biLSTM layers and replaced softmax with a conditional random field layer, but we did not observe improvements., we a simpler model.  We a to determine optimal parameters such as dropout rate.  Again, we used the “Adamax” optimizer with categorical cross entropy loss and a learning rate of 0.001.  We also applied early stopping with patience of up to 5 consecutive epochs without improvement.Experiments and Results :::  Core Word :::  Experimental SetupFor the experiments conducted, theaskit BIBREF41 a backend. the the set as and we use for tuning (We included the CASE feature, which specifies whether the letter accepts a normal diacritic or case ending, in all our setups.We conducted multiple experiment using different features, namely:  CHAR:  This is our baseline setup where we only used the characters as features.CHAR+SEG:  This takes the characters and their segmentation information as features.CHAR+PRIOR:  This takes the characters and their the observed diacritized forms in the training set.  All:This setup includes all the features.  We also optionally employed post correction.  For words that were seen in training, if the model produced a diacritized form that was not seen in the training data, we assumed it was an error and replaced it with the most frequently observed diacritized form (using a unigram language model).We report two, namely ( and).  We used relaxed scoring we assumed an empty be to sukun we removed defaultics – fatHa by, by and by  Using scoring would allow to compare systems that may use different diacritization conventions.Experiments and Results :::  Core Word :::  Results and Error analysisFor testing, we used the aforementioned WikiNews dataset to test the MSA diacritizer and the held-out 5,000 sentences for CA.  Table TABREF27 shows WER and DER results using different features with and without post correction.  Experiments and Results :::Core Word :::  Results and Error analysis :::  MSA  Results:For M, the CHARPRIOR feature to features., post correctionWe to other namely Farasa BIBREF, MADAMIREF RRash), (Belink and and MicrosoftS28.Table TABREF34 compares our system with others in the aforementioned systems.  As the results show, our results beat the current state-of-the-art.  For error analysis, we analyzed all the errors (527 errors).The errors types along with examples of each are shown in Table TABREF29.  The most prominent error type arises from the selection of a valid diacritized form that does not match the context (40.8%).  Perhaps, including POS tags as a feature or augmenting the PRIOR feature with POS tag information and a bigram language model may reduce the error rate further.  The second most common error is due to transliterated foreign words including foreign named entities (23.5%).Such words not during. , Arabic Named entities for the, where were not or they share identical- , building larger ofized entities may resolve NE  In theritizer produced in completely incorrect diacritized forms.In some the cases (%), the diritizer a that is the, were fact.   to inization (.�bare ale� () at word or   cases include words and words where both diacritized forms are equally valid.Experiments and Results :::  Core Word :::  Results and Error analysis :::  CAResults:  For CA results, the CHAR+SEG and CHAR+PRIOR performed better than using characters alone with CHAR+PRIOR performing better than CHAR+SEG.  As in the case with MSA, combining all the features led to the best results.Post correction had a significantly larger positive impact on results compared to what we observed for MSA.  This may indicate that we need a larger training set.  The best WER that we achieved for CW diacritics with post corrections is 2.2%.  Since we did not have access to any publicly available system that is tuned for CA, we compared our best system to using our best MSA system to diacritize the CA test set, and the MSA diacritizer produced significantly lower results with a WER of 8.5% (see Table TABREF34).This highlights the large difference between MSA and CA and the need for systems that are specifically tuned for both.  We randomly selected and analyzed 500 errors (5.2% of the errors).  The errors types along with examples of each are shown in Table TABREF33.The two most common errors involve the system producing completely correct diacritized forms (38.8%) or correct forms that don't match the context (31.4%).  The relatively higher percentage of completely incorrect guesses, compared to MSA, may point to the higher lexical diversity of classical Arabic.  As for MSA, we suspect that adding additional POS information and employing a word bigram to constrain the PRIOR feature may help reduce selection errors.  Another prominent error is related to the diacritics that appear on attached suffixes, particularly pronouns, which depend on the choice of case ending (13.2%).Errors due to named entities are slightly fewer than those seen for MSA (8.8%).  A noticeable number of mismatches between the guess and the reference are due to partial diacritization of the reference (4.4%).  We plan to conduct an extra round of checks on the test set.Experiments and Results :::  Case Ending :::  Experimental SetupWe conducted multiple experiments to determine the relative effect of the different features as follows:  word:  This is our baseline setup, which uses word surface forms only.word-surface:  This setup uses the word surface forms, stems, prefixes, and suffixes (including noun suffixes).  This simulates the case when no POS tagging information is available.word-POS:  This includes the word surface form and POS information, including gender and number of stems,  prefixes, and suffixes.word-morph:  This includes words and their stem templates to capture morphological patterns.word-surface-POS-morph:  This setup uses all the features (surface, POS, and morphological).  all-misc: This uses all features plus word and stem leading and trailing character unigrams and bigrams in addition to sukun words and named entities.For testing the aforementioned Wiki   we to five other systems, namely Farasa BIBREF31,  MADAMIRA BIBREF29, RDI (Rashwan et al., 2015), MIT (Belinkow and Glass, 2015), and Microsoft ATKS BIBREF28.For CA testing, we used the 5,000 sentences that we set aside.  Again, we compared to our best MSA system.  Experiments and Results :::Case Ending :::  Results and Error Analysis  TableTABREF45 lists the results of our setups compared to other systems.  Experiments and Results :::  Case Ending :::Results and Error Analysis :::  MSA Results:  As the results show, our baseline DNN system outperforms all state-of-the-art systems., adding more features yielded results.  Sur features most by andly stem   adding tail characters with a of su words and entities to  Our feature-rich system has a CEER that is approximately 61% lower than any of the state-of-the-art systems.Figure FIGREF shows CE and.For the four basic markers kasra, fatHa, damma and sukun, which appear 27%, 14%, 9% and 10% respectively, the system has CEER of $\sim $1% for each.  Detecting the virtual CE mark is a fairly easy task.All other CE markers represent 13% with almost negligible errors.  Table TABREF30 lists a thorough breakdown of all errors accounting for at 1% of the errors along with the most common reasons of the errors and examples illustrating these reasons.  For example, the most common error type involves guessing a fatHa (a) instead of damma (u) or vice versa (19.3%).  The most common reasons for this error type, based on inspecting the errors, were due to:POS errors (ex. a word is tagged as a verb instead of a noun); and a noun is treated as a subject instead of an object or vice versa.  The table details the rest of the error types.  Overall, some of the errors are potentially fixable using better POS tagging, improved detection of non-Arabized foreign names, and detection of indeclinability.  However, some errors are more difficult and require greater understanding of semantics such as improper attachment, incorrect idafa, and confusion between subject and object.Perhaps, such semantic errors can be resolved using parsing.  Experiments and Results :::  Case Ending :::Results and Error Analysis :::  CA  Results:The results the POS tagging features most improvements the.  ining all features led to the best results with WER of 2.5%.  As we saw for CW diacritics, using our best MSA system to diacritize CA led to significantly lower results with CEER of 8.9%.Figure FIGREF shows CE and prediction. the four basic markers fat, kas, and su, which appear the has CEER% for each.  Again, detecting the virtual CE mark was a fairly easy task.  All other CE markers representing 20% have negligible errors.Table TABREF31 lists the error, which for least errors, their and explanatory. are those observed for MSA   are more and nature and be using better and identification of indeclinability, particularly as they relate to named entities and nouns with feminine markers.Other errors incorrect incorrect id, false and can perhaps of.   the core errors for the reference has some errors (ex. {a,i,o} $\Rightarrow $ #), and extra rounds of reviews of the reference are in order.  Experiments and Results :::Full Diacritization  Results  Table TABREF48 compares the full word diacritization (CW+CE) of our best setup to other systems in the literature. the results show for M, our overall diritization is.% the of art system of 12.2%.  As for CA, our best system produced an error rate of 4.3%, which is significantly better than using our best MSA system to diacritize CA.  Conclusion and Future WorkIn this paper, we presented a feature-rich DNN approach for MSA CW and CE recovery that produces a word level error for MSA of 6.0%, which is more than 50% lower than state-of-the-art systems (6.0% compared to 12.2%) and word error rate of 4.3% for CA.  Specifically, we used biLSTM-based model with a variety of surface, morphological, and syntactic features.  Reliable NLP tools may be required to generate some of these features, and such tools may not be readily available for other language varieties, such as dialectal Arabic.However, we showed the efficacy of different varieties of features, such as surface level-features, and they can help improve diacritization individually.  Further, though some errors may be overcome using improved NLP tools (ex. better POS tagging), semantic errors, such incorrect attchment, are more difficult to fix.  Perhaps, using dependency parsing may help overcome some semantic errors.  As for feature engineering, the broad categories of features, such as surface, syntactic, and morphological features, may likely carry-over to other languages, language-specific feature engineering may be require to handle the specificity of each language., since multiple diritization, of, one convention for training a good system for properly.  Though have mostly this for M, the CA dataset requires more to insureFor future work, we want to explore the effectiveness of augmenting our CW model with POS tagging information and a bigram language model., we to a multi reference diritization test to handle words that have multiple valid diacritized forms.  For CE, we want to examine the effectiveness of the proposed features for Arabic parsing.  We plan to explore:  character-level convolutional neural networks that may capture sub-word morphological features;pre-trained embeddings; and attention mechanisms to focus on salient features.  We also plan to explore joint modeling for both core word and case ending diacritics.... [The rest of the article is omitted]

Question:
what linguistics features are used?

Answer:
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>

